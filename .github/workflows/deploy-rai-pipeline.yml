name: deploy-rai-pipeline

on:
  workflow_dispatch:

jobs:
  set-env-branch:
    runs-on: ubuntu-latest
    outputs:
      config-file: ${{ steps.set-output-defaults.outputs.config-file }}
    steps:
      - id: set-prod-branch
        name: set-prod-branch
        if: ${{ github.ref == 'refs/heads/main'}}
        run: echo "config_env=infrastructure/env-variables/config-infra-prod.yml" >> $GITHUB_ENV
      - id: set-stage-branch
        name: set-stage-branch
        if: ${{ github.ref == 'refs/heads/staging' }}
        run: echo "config_env=infrastructure/env-variables/config-infra-stage.yml" >> $GITHUB_ENV
      - id: set-dev-branch
        name: setdevbranch
        if: ${{ github.ref == 'refs/heads/develop'}}
        run: echo "config_env=infrastructure/env-variables/config-infra-dev.yml" >> $GITHUB_ENV
      - id: set-output-defaults
        name: set-output-defaults
        run: |
          echo "config-file=$config_env" >> $GITHUB_OUTPUT

  get-config:
    needs: set-env-branch
    uses: AbinZorto/mlops-templates/.github/workflows/read-yaml.yml@main
    with:
      file_name: ${{ needs.set-env-branch.outputs.config-file }}

  ml-ops-jobs:
    needs: [set-env-branch, get-config]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install and cache dependencies
        uses: ./.github/actions/install-and-cache-deps

      - name: Create config.json
        run: |
          echo '{
            "subscription_id": "${{ needs.get-config.outputs.subscription_id }}",
            "resource_group": "${{ needs.get-config.outputs.resource_group }}",
            "workspace_name": "${{ needs.get-config.outputs.aml_workspace }}"
          }' > config.json

      - name: Register environment
        uses: ./.github/actions/register-environment
        env:
          AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        with:
          environment_name: ${{ needs.get-config.outputs.environment_name }}
          environment_description: ${{ needs.get-config.outputs.environment_description }}
          environment_path: ${{ needs.get-config.outputs.environment_path }}
          build_type: ${{ needs.get-config.outputs.build_type }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create compute
        uses: ./.github/actions/create-compute
        env:
          AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        with:
          cluster_name: cpu-cluster
          size: Standard_DS3_v2
          min_instances: 0
          max_instances: 4
          cluster_tier: dedicated
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run RAI pipeline
        uses: ./.github/actions/run-rai-pipeline
        env:
          AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        with:
          pipeline_path: amlws-assets/pipelinejobs/eegrai.py
          experiment_name: "dev-eegops-automl-classification"
          environment_name: ${{ needs.get-config.outputs.environment_name }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          compute_name: "cpu-cluster"
          model_name: "automl"
          model_version: "2"
          version: "1.0.3"
          data_name: "automl_features"